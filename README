### PROCESS FRIENDS CONSOLE COMMANDS ###

# needed when localhost
require 'process_friends'

# find last N users that signed up
tokenIdArray = Token.limit(5).order("created_at DESC").select('facebook_id').map do |t| t.facebook_id end

# Create delayed jobs and process friends for an array of userIds
tokenIdArray.each do |t| Delayed::Job.enqueue ProcessFriends.new(t) end

# Call process_friends on an individual user
ProcessFriends.new(575814173).perform

###


### SQL QUERIES FOR DEBUGGING ###

# check for dupes in profiles and users table; if any rows returned, those are the dupes
# replace 'profiles' with 'users' to check users table
select facebook_id, count(*)
from profiles group by facebook_id having count(*)>1;

# check for dupes in schools table; if any rows returned, those are the dupes
# school is unique on combo of facebook_id and school_id
select facebook_id, school_id, count(*) from schools
group by 1,2 having count(*)>1;

### SQL QUERIES FOR STATS ###

# show the last 50 users who signed-in to friendmash
# show their first name, last name, and how many seconds it took to do their first vote (since signing-in)
select a.id, a.facebook_id, d.first_name, d.last_name, a.created_at as 'signup date',
    votes,  votes_network,TIME_TO_SEC(TIMEDIFF(min(e.created_at),a.created_at)) as 'timeToFirstVote'
from tokens a
join profiles d on a.facebook_id = d.facebook_id
left join results e on e.facebook_id = a.facebook_id
where a.id > (select max(id)-50 from tokens)
group by 1,2,3
order by a.created_at desc;

# metric to see user retention
# shows who have been voting on a given particular day
# broken down by user group "same day signup", "signup 1-3 days ago", "signup >3 days ago"
select date(a.created_at),
sum(case when datediff(date(a.created_at),date(b.created_at))=0 then 1 else 0 end),
sum(case when datediff(date(a.created_at),date(b.created_at)) between 1 and 3 then 1 else 0 end),
sum(case when datediff(date(a.created_at),date(b.created_at)) > 3 then 1 else 0 end),
count(*)
from results a
join tokens b on a.facebook_id = b.facebook_id and b.id>50
group by 1 order by 1;

# shows distribution by score of ...
# ... wins+losses (ie voting)
# ... user counts in each score bucket
# ... avg votes/user in each score bucket
select round(score/25)*25, sum(wins+losses), count(*),
sum(wins+losses)/count(*)
from users where gender = 'female'
and wins+losses>0
group by 1 order by 1 desc;


== TODO ==
Add a security consumer-key to protect APIs

Pre-cache the next mashup
- On first load, we have nothing in cache, so we load one set, and then background load a second set
- When the user makes a decision, the pre-cached set gets displayed and we background load a new set

Compatibility rating
- member of the same groups
- interests, musics, likes, relationship status

Based on who you choose over time
we present you with a top list of people who seem most compatible with you and their ranking/score

You want to know who voted for you and who liked you

A user needs to have his own table for how many times he voted for a specific person
then we have a top leaderboards of who he likes, and vice versa
- vote number (integer)

percentage of friend network voted on out of personal social network
the more you play the more chances of completion
but when friends or friends of friends add new friends, the percentage gets smaller

percentage of total users voted on
- shows that this thing is huge and growing

CoD style global statistics
- How many people are facemashing
- How many people have been mashed total
- Other fun statistics
- Maybe make this a scrolling marquee in the Launcher page

show statistics for like how many votes/likes
how many times you won
- your ranking
- your score
- your wins
- your losses
- your percentage complete in network
- your percentage complete in world
- your top 10 compatibility list
- your top 10 admirers
- how many battles have you played
- average decision time

== Ver. 2 ==
Add code to allow tap to cycle thru all profile pictures for a user

Add a mode where we show +/- 50 users from the current user in rankings in client

Add a better help overlay view in client

Segmentation by age, relative hotness level

in the future we can do a work network and school network mash

New Game Types:
- 4 person mode
- Elimination round (mortal combat)
- Bachelorette mode

== DONE ==

Pass metrics data in HTTP HEADERS
- current user id
- current app version
SCRIPTS CONSOLE



== Notes ==
# Achievement icon/badges go into profile page
# special rankings, maybe chevrons, wow pvp ranking badges
# win streak crown
# location based: mayor of location

want to allow people to feel like they accomplished something by playing
want to get people to come back and play more
want to get people to see their progress (percentage complete), achievements

== CREATING INDEX IN DB
# ActiveRecord::Base.connection.execute("create unique index idx_users_facebook_id on users (facebook_id)")
# ActiveRecord::Base.connection.execute("create index idx_networks_facebook_id on networks (facebook_id)")
# ActiveRecord::Base.connection.execute("create index idx_networks_friend_id on networks (friend_id)")
# ActiveRecord::Base.connection.execute("create unique index idx_profiles_facebook_id on profiles (facebook_id)")


== Scraping people's profile album
https://api.facebook.com/method/fql.query?access_token=


SELECT aid FROM album WHERE owner = '102167' AND type = 'profile'


SELECT src FROM photo WHERE aid = '438803926060737'


Null album response:
[]

Valid album response:
[
  {
    "aid": "438803926060737"
  }
]


Valid photos response:
[
  {
    "src": "http://photos-b.ak.fbcdn.net/hphotos-ak-snc1/hs261.snc1/8821_660692634502_102167_38355097_1953449_s.jpg"
  },
  {
    "src": "http://photos-e.ak.fbcdn.net/hphotos-ak-snc1/hs148.snc1/5520_649907522952_102167_37901692_5534508_s.jpg"
  },
  {
    "src": "http://photos-d.ak.fbcdn.net/photos-ak-ash1/v104/118/47/102167/s102167_32768806_8429.jpg"
  },
  {
    "src": "http://photos-d.ak.fbcdn.net/photos-ak-ash1/v104/118/47/102167/s102167_32768819_4381.jpg"
  },
  {
    "src": "http://photos-d.ak.fbcdn.net/photos-ak-ash1/v65/118/47/102167/s102167_31823972_1101.jpg"
  },
  {
    "src": "http://photos-c.ak.fbcdn.net/photos-ak-sf2p/v65/118/47/102167/s102167_31823997_4009.jpg"
  },
  {
    "src": "http://photos-f.ak.fbcdn.net/photos-ak-ash1/v55/118/47/102167/s102167_31447787_9172.jpg"
  }
]